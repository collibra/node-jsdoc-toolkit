<section>
  <div class="details section border-radius props">
    <div class="innerProps">
      <h2 class="sectiontitle">Method Details</h2>
      
      <ul class="sectionitems">
        {!
          var methodDetailCount = 0;
        !}
        <for each="member" in="data.ownMethods">
          <li class='sectionitem'>
            <div class="itemheader" id="{+Link.symbolNameToLinkName(member)+}">
              <span class="itemname">{+member.name.replace(/\^\d+$/, '')+}</span><span class="argument">{+makeSignature(member.params)+}</span>
              <if test="member.type"><span class="itemtype">{{+new Link().toSymbol(member.type)+}}</span></if>
            </div>
            <div class="itemcontent">
              <!-- PATH -->
              <if test="member.srcFile != data.srcFile && (/^true$/i).test(JSDOC.opt.D.development)">
                <div class="definedin"><span class="label">Defined in:</span>{+new Link().toSrc(member.srcFile)+}.</div>
              </if>
              <!-- #PATH -->

              <div class="description">
                {+resolveLinks(member.desc)+}
              </div>
              
              <!-- EXAMPLES -->
              <if test="member.example.length">
                <div class="itemsubsection">
                  <h3>Example</h3>
                  <for each="example" in="member.example">
                    <div class="examplecode">
                      <pre class="code"><code class="javascript">{+example+}</code></pre>
                    </div>
                  </for>
                </div>
              </if>
              <!-- #EXAMPLES -->

              <!-- PARAMS -->
              <if test="member.params.length">
              {!
                
                //collecting and grouping options
                var tags = member.comment.tags;
                var prev_tag = null;
                var prev_param = null;
                for(t in tags) {
                  var tag = tags[t];
                  if (tag.title === "option") {
                    tag.possibleInstances = tag.desc.match(/\(([^)]+)\)/gi);
                    for (var p in tag.possibleInstances) {
                      var trimedInstance = tag.possibleInstances[p].replace(/ |\(|\)/g,"");
                      tag.desc = tag.desc.replace(tag.possibleInstances[p], trimedInstance);
                      tag.possibleInstances[p] = trimedInstance;
                    }
                    
                    tag.name = tag.desc.match(/[a-zA-Z0-9"',_\-\+$\.]+/)[0];
                    
                    for (var p in tag.possibleInstances) {
                      var token = tag.possibleInstances[p].split(","),
                          pistring = "";
                      for (var t in token) {
                        pistring += "<span>" + token[t] + "</span> | ";
                      }
                      tag.name = tag.name.replace(tag.possibleInstances[p], pistring.replace(/( \| )(?!.*( \| ))/, ""));
                    }
                    
                    tag.defaultValue = tag.desc.match(/[a-zA-Z0-9"'=_\-\+$\.]+/)[0].split("=")[1];
                    if (tag.defaultValue) {
                      tag.defaultValue = tag.defaultValue.replace(/\"|\'/g,"");
                    }
                    tag.isOptional = (tag.desc.indexOf("[") && tag.desc.indexOf("[")) === -1 ? 0 : 1;
                    tag.desc = tag.desc.indexOf(" ") === -1 ? "" : tag.desc.substr(tag.desc.indexOf(" ")+1, tag.desc.length);
                  
                    if (prev_tag === null || prev_tag.title !== "param") {
                        throw {lineNumber: 60, name: "in methods.tmpl", message: " @OPTION found without @PARAM in '" + member.name +"'" };
                    } else {
                      for(p in member.params) {
                        if (member.params[p].name == prev_tag.name) {
                          if (typeof(member.params[p].options) == 'object' && (member.params[p].options instanceof Array)) {
                            member.params[p].options.push(tag);
                          } else {
                            member.params[p].options = [tag];
                          }
                        }
                      }
                  }
                  }
                  if (tag.title === "param") {
                    prev_tag = tag;
                  }
                  if (tag.title === "options") {
                    print("Error: Tag @OPTIONS found instead of @OPTION. Use either not both. Tag @OPTIONS is invalid. Will now exit..");
                    throw Error();
                  }
                }
                //print(member.serialize())
              !}
                <div class="itemsubsection">
                  <h3>Arguments</h3>

                  <ul class="params">
                  <for each="item" in="member.params">
                    <li>
                      <div class="paramname"><if test="item.isOptional">[</if>{+item.name+}<if test="item.isOptional">]</if></div>
                      <div class="paramtype">{+((item.type)?"{"+(new Link().toSymbol(item.type))+"}" : "")+}</div>
                      <if test="item.defaultValue">
                        <div class="paramdefault">{+item.defaultValue+}</div>
                      </if>
                      <div class="description">{+resolveLinks(item.desc)+}</div>
                    <!-- PARAM OPTIONS -->
                    <if test="item.options && item.options.length">
                      <ul class="paramoptions">
                        <for each="option" in="item.options">
                          <li>
                            <div class="paramname"><if test="option.isOptional">[</if>{+option.name+}<if test="option.isOptional">]</if></div>
                            <div class="paramtype">{+((option.type)?"{"+(new Link().toSymbol(option.type))+"}" : "")+}</div>
                            <if test="option.defaultValue">
                              <div class="paramdefault">{+option.defaultValue+}</div>
                            </if>
                            <div class="description">{+resolveLinks(option.desc)+}</div>
                          </li>
                        </for>
                      </ul>
                    </if>
                    <!-- #PARAM OPTIONS -->
                    </li>
                  </for>
                  </ul>

                </div>
              </if>
              <!-- #PARAMS -->

              <if test="member.deprecated || member.since || member.exceptions.length || member.returns.length || member.requires.length || member.see.length">
              
                  <if test="member.deprecated">
                    <div class="itemsubsection">
                      <h3>Deprecated</h3>
                      <div class="deprecated">
                        {+ resolveLinks(member.deprecated) +}
                      </div>
                    </div>
                  </if>
                  
                  <if test="member.since">
                    <div class="itemsubsection">
                      <h3>Since</h3>
                      <div class="since">{+ member.since +}</div>
                    </div>
                  </if>
                  
                  <if test="member.exceptions.length">
                    <div class="itemsubsection">
                      <h3>Throws</h3>
                      <div class="exceptions">
                        <for each="item" in="member.exceptions">
                          <div class="paramtype">{+((item.type)?"{"+(new Link().toSymbol(item.type))+"}" : "")+} <b>{+item.name+}</b></div> 
                          <div class="description">{+resolveLinks(item.desc)+}</div>
                        </for>
                      </div>
                    </div> 
                  </if>
                  
                  <if test="member.returns.length">
                    <div class="itemsubsection">
                      <h3>Return Value</h3>
                      <div class="returns">
                        <for each="item" in="member.returns">
                          <div class="paramtype">{+((item.type)?"{"+(new Link().toSymbol(item.type))+"}" : "")+}</div> 
                          <div class="description">{+resolveLinks(item.desc)+}</div>
                        </for>
                      </div>
                    </div>  
                  </if>
                  
                  <if test="member.requires.length">
                    <div class="itemsubsection">
                      <h3>Requires</h3>
                      <div class="requires">
                        <for each="item" in="member.requires">
                          <div class="item">{+ resolveLinks(item) +}</div> 
                        </for>
                      </div>
                    </div> 
                  </if>
                  
                  <if test="member.see.length">
                    <div class="itemsubsection">
                      <h3>See</h3>
                      <div class="requires">
                        <for each="item" in="member.see">
                          <div class="item">{+ new Link().toSymbol(item) +}</div> 
                        </for>
                      </div>
                    </div> 
                  </if>
              </if>

              <!-- AUTHORS -->
              <if test="(/^true$/i).test(JSDOC.opt.D.development)">
              <div class="authors">
                {!
                  if (member.author && (member.respA || member.respI)) {
                    print("Error: @author tag used along with @responsibleAPI and/or @responsibleImplementation. Use either not both. Will now exit..");
                    throw Error();
                  }
                !}
                
                <if test="member.author && !(member.respA || member.respI)">
                  <span class="api"><span class="icon-eye"></span>API: {+member.author+}</span>
                  <span class="implementation"><span class="icon-cogwheel"></span>Impementation: {+member.author+}</span>
                </if>
                <if test="!member.author && (member.respA || member.respI)">
                  <if test="member.respA"><span class="api"><span class="icon-eye"></span>API: {+member.respA+}</span></if>
                  <if test="member.respI"><span class="implementation"><span class="icon-cogwheel"></span>Impementation: {+member.respI+}</span></if>
                </if>
                
              </div>
              </if>
              <!-- #AUTHORS -->
            </div>
          </li>
        </for>
      </ul>
    </div>
      </ul>
  </div>
</section>